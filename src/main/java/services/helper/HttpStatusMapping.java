package services.helper;

import org.springframework.http.HttpStatus;
import static org.springframework.http.HttpStatus.*;

public class HttpStatusMapping {
    private HttpStatus httpStatusResponse;

    public HttpStatus getHttpStatus(int responseCode){
        switch (responseCode)
        {
            case 100: httpStatusResponse = CONTINUE;
                break;
            case 101: httpStatusResponse = SWITCHING_PROTOCOLS;
                break;
            case 102: httpStatusResponse = PROCESSING;
                break;
            case 103: httpStatusResponse = CHECKPOINT;
                break;
            case 201: httpStatusResponse = CREATED;
                break;
            case 202: httpStatusResponse = ACCEPTED;
                break;
            case 203: httpStatusResponse = NON_AUTHORITATIVE_INFORMATION;
                break;
            case 204: httpStatusResponse = NO_CONTENT;
                break;
            case 205: httpStatusResponse = RESET_CONTENT;
                break;
            case 206: httpStatusResponse = PARTIAL_CONTENT;
                break;
            case 207: httpStatusResponse = MULTI_STATUS;
                break;
            case 208: httpStatusResponse = ALREADY_REPORTED;
                break;
            case 226: httpStatusResponse = IM_USED;
                break;
            case 300: httpStatusResponse = MULTIPLE_CHOICES;
                break;
            case 301: httpStatusResponse = MOVED_PERMANENTLY;
                break;
            case 302: httpStatusResponse = FOUND;
                break;
            case 303: httpStatusResponse = SEE_OTHER;
                break;
            case 304: httpStatusResponse = NOT_MODIFIED;
                break;
            case 305: httpStatusResponse = USE_PROXY;
                break;
            case 307: httpStatusResponse = TEMPORARY_REDIRECT;
                break;
            case 308: httpStatusResponse = PERMANENT_REDIRECT;
                break;
            case 400: httpStatusResponse = BAD_REQUEST;
                break;
            case 401: httpStatusResponse = UNAUTHORIZED;
                break;
            case 402: httpStatusResponse = PAYMENT_REQUIRED;
                break;
            case 403: httpStatusResponse = FORBIDDEN;
                break;
            case 404: httpStatusResponse = NOT_FOUND;
                break;
            case 405: httpStatusResponse = METHOD_NOT_ALLOWED;
                break;
            case 406: httpStatusResponse = NOT_ACCEPTABLE;
                break;
            case 407: httpStatusResponse = PROXY_AUTHENTICATION_REQUIRED;
                break;
            case 408: httpStatusResponse = REQUEST_TIMEOUT;
                break;
            case 409: httpStatusResponse = CONFLICT;
                break;
            case 410: httpStatusResponse = GONE;
                break;
            case 411: httpStatusResponse = LENGTH_REQUIRED;
                break;
            case 412: httpStatusResponse = PRECONDITION_FAILED;
                break;
            case 413: httpStatusResponse = PAYLOAD_TOO_LARGE;
                break;
            case 414: httpStatusResponse = URI_TOO_LONG;
                break;
            case 415: httpStatusResponse = UNSUPPORTED_MEDIA_TYPE;
                break;
            case 416: httpStatusResponse = REQUESTED_RANGE_NOT_SATISFIABLE;
                break;
            case 417: httpStatusResponse = EXPECTATION_FAILED;
                break;
            case 418: httpStatusResponse = I_AM_A_TEAPOT;
                break;
            case 419: httpStatusResponse = INSUFFICIENT_SPACE_ON_RESOURCE;
                break;
            case 420: httpStatusResponse = METHOD_FAILURE;
                break;
            case 421: httpStatusResponse = DESTINATION_LOCKED;
                break;
            case 422: httpStatusResponse = UNPROCESSABLE_ENTITY;
                break;
            case 423: httpStatusResponse = LOCKED;
                break;
            case 424: httpStatusResponse = FAILED_DEPENDENCY;
                break;
            case 426: httpStatusResponse = UPGRADE_REQUIRED;
                break;
            case 428: httpStatusResponse = PRECONDITION_REQUIRED;
                break;
            case 429: httpStatusResponse = TOO_MANY_REQUESTS;
                break;
            case 431: httpStatusResponse = REQUEST_HEADER_FIELDS_TOO_LARGE;
                break;
            case 451: httpStatusResponse = UNAVAILABLE_FOR_LEGAL_REASONS;
                break;
            case 500: httpStatusResponse = INTERNAL_SERVER_ERROR;
                break;
            case 501: httpStatusResponse = NOT_IMPLEMENTED;
                break;
            case 502: httpStatusResponse = BAD_GATEWAY;
                break;
            case 503: httpStatusResponse = SERVICE_UNAVAILABLE;
                break;
            case 504: httpStatusResponse = GATEWAY_TIMEOUT;
                break;
            case 505: httpStatusResponse = HTTP_VERSION_NOT_SUPPORTED;
                break;
            case 506: httpStatusResponse = VARIANT_ALSO_NEGOTIATES;
                break;
            case 507: httpStatusResponse = INSUFFICIENT_STORAGE;
                break;
            case 508: httpStatusResponse = LOOP_DETECTED;
                break;
            case 509: httpStatusResponse = BANDWIDTH_LIMIT_EXCEEDED;
                break;
            case 510: httpStatusResponse = NOT_EXTENDED;
                break;
            case 511: httpStatusResponse = NETWORK_AUTHENTICATION_REQUIRED;
                break;
            default:
                httpStatusResponse = OK;
                break;
        }
        return httpStatusResponse;
    }
}
